// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texturecoord;
uniform mat4 WorldInverseTranspose;
uniform mat4 ModelViewProjectionMatrix;

uniform vec2 ScalePointLocation;
uniform float ScaleValue;
uniform vec3 ScalePointWorldLocation;
uniform bool Drawpoint;

uniform float u_innerLimit;
uniform float u_outerLimit; 
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform float shininess;

uniform vec3 LightWorldPosition;
uniform sampler2D u_texture;

varying vec4 color;

vec2 GetScaleTextureCoords(vec2 texturecoord, float Value, vec2 ScalePoint)
{
    vec3 CalculatedTextCoords = vec3(texturecoord, 1);
   
    mat3 ScaleMatrix = mat3(vec3(Value, 0.0, 0.0),
                            vec3(0.0, Value, 0.0),
                            vec3(0.0, 0.0, 1.0));

    mat3 TransformForward = mat3(vec3(1.0, 0.0, 0.0),
                                 vec3(0.0, 1.0, 0.0),
                                 vec3(-ScalePoint.x, -ScalePoint.y, 1.0));

    mat3 TransformBackward = mat3(vec3(1.0, 0.0, 0.0),
                                  vec3(0.0, 1.0, 0.0),
                                  vec3(ScalePoint.x, ScalePoint.y, 1.0));

    CalculatedTextCoords = TransformForward * CalculatedTextCoords;
    CalculatedTextCoords = ScaleMatrix * CalculatedTextCoords;
    CalculatedTextCoords = TransformBackward * CalculatedTextCoords;

    return CalculatedTextCoords.xy;
}

void main() {
    if (Drawpoint == true) {
        gl_Position = ModelViewProjectionMatrix * vec4(ScalePointWorldLocation, 1.0);
        gl_PointSize = 10.0;
    } else {
        vec4 vertexPosition4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
        vec3 vertexPosition = vec3(vertexPosition4) / vertexPosition4.w;
        vec3 normalInterpolation = mat3(WorldInverseTranspose) * normal;
        gl_Position = vertexPosition4;

        vec2 v_texturecoord = GetScaleTextureCoords(texturecoord, ScaleValue, ScalePointLocation);

        vec3 normal = normalize(normalInterpolation);
        vec3 lightDirection = normalize(LightWorldPosition - vertexPosition);

        float dotFromDirection = max(dot(normal, lightDirection), 0.0);
        float specularLight = 0.0;
        if (dotFromDirection > 0.0) {
            vec3 viewDirection = normalize(-vertexPosition);
            vec3 halfDirection = normalize(lightDirection + viewDirection);
            float specularAngle = max(dot(halfDirection, normal), 0.0);
            specularLight = pow(specularAngle, shininess);
        }

        float inLight = smoothstep(u_outerLimit, u_innerLimit, dotFromDirection);

        vec3 diffuse = inLight * diffuseColor;
        vec3 ambient = ambientColor;
        vec3 specular = specularLight * specularColor;
        vec4 TextureColor = texture2D(u_texture, v_texturecoord);
        color = vec4(diffuse + ambient + specular, 1.0) + TextureColor;
    }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif

varying vec4 color;

void main() {
    gl_FragColor = color;
}`;